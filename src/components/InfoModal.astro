---
import BotonReproducir from "./BotonReproducir.astro";
import CloseButton from "./Iconos/CloseButton.astro";

interface Props {
  data?: {
    contentId: string;
    type: string;
    title: string;
    description: string;
    contentUrl: string;
    genre: string;
    duration: string;
    thumbnailUrl: string;
  };
  showModal: string;
  ContentId?:string;
  /*   isVisible?: boolean; */
}

const {data,showModal}=Astro.props
/* 
const { isVisible, data } = Astro.props; */
/* const {  ContentId,showModal = false } = Astro.props;
console.log(ContentId);
let contentData
if (ContentId)
{  contentData = await fetch(`${Astro.url.origin}/api/${ContentId}`).then(
  (response) => response.json()
); } */
/* const contentData = await fetch(`${Astro.url.origin}/api/${ContentId}`).then( */



---

{ !data ? "Cargando" :
<div
  class=" w-screen h-screen z-50 transition duration-300 bg-black bg-opacity-50 flex justify-center items-center overflow-x-hidden overflow-y-auto fixed inset-0"
  x-show={showModal}
>
  <div class="relative w-auto mx-auto max-w-3xl rounded-md overflow-hidden">
    <div
      class={`scale-100 transform duration-300 relative flex-auto bg-zinc-900 drop-shadow-md`}
    >
      <div class="relative h-96">
        <video
          class="w-full brightness-[60%] object-cover h-full"
          autoplay
          muted
          loop
          poster={data?.thumbnailUrl}
          src={data?.contentUrl}></video>

        <button
          data-close-button
          class="cursor-pointer absolute top-3 right-3 h-10 w-10 rounded-full hover:scale-125 bg-black bg-opacity-70 flex items-center justify-center text-white"
          @click="showModal = false"
        >
          <CloseButton width="30" height="30" />
        </button>

        <div class="absolute bottom-[10%] left-10">
          <p
            class="text-white text-3xl md:text-4xl h-full lg:text-5xl font-bold mb-8"
          >
            {data?.title}
          </p>

          <div class="flex flex-row gap-4 items-center">
            <BotonReproducir ContentId={data?.contentId} />
          </div>
        </div>
      </div>

      <div class="px-12 py-8">
        <p class="text-green-400 font-semibold text-lg">Novedad</p>
        <p class="text-white text-lg">{data?.duration}</p>
        <p class="text-white text-lg">{data?.genre}</p>
        <p class="text-white text-lg">{data?.description}</p>
      </div>
    </div>
  </div>
</div>

<!-- 
<style>
    .hidden {
      display: none;
    }
  </style> 
<!-- 

{
  !isVisible ? null : (
    <div class={`modal-container ${isVisible ? '' : 'hidden'} z-50 transition duration-300 bg-black bg-opacity-50 flex justify-center items-center overflow-x-hidden overflow-y-auto fixed inset-0`}>
      <div class="relative w-auto mx-auto max-w-3xl rounded-md overflow-hidden">
        <div
          class={`${isVisible ? "scale-100" : "scale-0"}
        transfor duration-300 relative flex-auto bg-zinc-900 drop-shadow-md`}
        >
          <div class="relative h-96">
            <video
              class="w-full brightness-[60%] object-cover h-full"
              autoplay
              muted
              loop
              poster={data?.thumbnailUrl}
              src={data?.contentUrl}
            />

            <button data-close-button
              class="cursor-pointer absolute top-3 right-3 h-10 w-10 rounded-full hover:scale-125 bg-black bg-opacity-70 flex items-center justify-center text-white"
              onclick=
            >
              <CloseButton width="30" height="30" />
            </button>

            <div class="absolute bottom-[10%] left-10">
              <p class="text-white text-3xl md:text-4xl h-full lg:text-5xl font-bold mb-8">
                {data?.title}
              </p>

              <div class="flex flex-row gap-4 items-center">
                <BotonReproducir ContentId={data?.contentId} />
              </div>
            </div>
          </div>

          <div class="px-12 py-8">
            <p class="text-green-400 font-semibold text-lg">Novedad</p>
            <p class="text-white text-lg">{data?.duration}</p>
            <p class="text-white text-lg">{data?.genre}</p>
            <p class="text-white text-lg">{data?.description}</p>
          </div>
        </div>
      </div>
    </div>
  )
}
}

<script>
    // Find our component DOM on the page.
    const closeButton = document.querySelector('[data-close-button]');
    const modalContainer = document.querySelector('.modal-container');
  
    function toggleModal() {
      modalContainer.classList.toggle('hidden');
    }
  
    // Add event listener to close the modal when the button is clicked.
    closeButton.addEventListener('click', toggleModal);
  
    // Add event listener to close the modal when the 'Escape' key is pressed.
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        toggleModal();
      }
    });
  </script> -->
